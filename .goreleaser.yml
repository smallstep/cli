# This is an example .goreleaser.yml file with some sane defaults.
# Make sure to check the documentation at http://goreleaser.com
project_name: step

before:
  hooks:
    # You may remove this if you don't use go modules.
    - go mod download
    # - go generate ./...

builds:
  -
    id: default
    env:
      - CGO_ENABLED=0
    targets:
      - darwin_amd64
      - darwin_arm64
      - freebsd_amd64
      - linux_386
      - linux_amd64
      - linux_arm64
      - linux_arm_5
      - linux_arm_6
      - linux_arm_7
      - linux_mips
      - linux_mips64
      - linux_ppc64le
      - windows_amd64
      - windows_arm64
    flags:
      - -trimpath
    main: ./cmd/step/main.go
    binary: bin/step
    ldflags:
      - -w -X main.Version={{.Version}} -X main.BuildTime={{.Date}}
  -
    # This build is specifically for nFPM targets (.deb and .rpm files).
    # It's exactly the same as the default build above, except:
    # - it only builds the archs we want to produce .deb and .rpm files for
    # - the name of the output binary is step-cli
    id: nfpm
    env:
      - CGO_ENABLED=0
    goos:
      - linux
    goarch:
      - amd64
      - arm64
    flags:
      - -trimpath
    main: ./cmd/step/main.go
    binary: step-cli
    ldflags:
      - -w -X main.Version={{.Version}} -X main.BuildTime={{.Date}}

archives:
  -
    # Can be used to change the archive formats for specific GOOSs.
    # Most common use case is to archive as zip on Windows.
    # Default is empty.
    rlcp: true
    name_template: "{{ .ProjectName }}_{{ .Os }}_{{ .Version }}_{{ .Arch }}{{ if .Arm }}v{{ .Arm }}{{ end }}{{ if .Mips }}_{{ .Mips }}{{ end }}"
    format_overrides:
      - goos: windows
        format: zip
    builds:
      - default
    wrap_in_directory: "{{ .ProjectName }}_{{ .Version }}"
    files:
      - README.md
      - LICENSE
      - autocomplete/*

nfpms:
  # Configure nFPM for .deb and .rpm releases
  #
  # See https://nfpm.goreleaser.com/configuration/
  # and https://goreleaser.com/customization/nfpm/
  #
  # Useful tools for debugging .debs:
  # List file contents: dpkg -c dist/step_...deb
  # Package metadata: dpkg --info dist/step_....deb
  #
  -
    builds:
      - nfpm
    package_name: step-cli
    file_name_template: "{{ .PackageName }}_{{ .Version }}_{{ .Arch }}{{ if .Arm }}v{{ .Arm }}{{ end }}{{ if .Mips }}_{{ .Mips }}{{ end }}"
    vendor: Smallstep Labs
    homepage: https://github.com/smallstep/cli
    maintainer: Smallstep <techadmin@smallstep.com>
    description: >
      step-cli lets you build, operate, and automate Public Key Infrastructure (PKI) systems and workflows.

      It's a swiss army knife for authenticated encryption (X.509, TLS), single sign-on (OAuth OIDC, SAML), multi-factor authentication (OATH OTP, FIDO U2F), encryption mechanisms (JSON Web Encryption, NaCl), and verifiable claims (JWT, SAML assertions).
    license: Apache 2.0
    section: utils
    formats:
      - deb
      - rpm
    priority: optional

    bindir: /usr/bin
    contents:
      - src: debian/copyright
        dst: /usr/share/doc/step-cli/copyright
        # Ghost files are used for RPM and ignored elsewhere
      - dst: /usr/bin/step
        type: ghost
      - dst: /usr/share/bash-completion/completions/step
        type: ghost
    scripts:
      postinstall: scripts/postinstall.sh
      postremove: scripts/postremove.sh

source:
  enabled: true
  rlcp: true
  name_template: '{{ .ProjectName }}_{{ .Version }}'

checksum:
  name_template: 'checksums.txt'
  extra_files:
    - glob: ./.releases/*

signs:
- cmd: cosign
  signature: "${artifact}.sig"
  certificate: "${artifact}.pem"
  args: ["sign-blob", "--oidc-issuer=https://token.actions.githubusercontent.com", "--output-certificate=${certificate}", "--output-signature=${signature}", "${artifact}"]
  artifacts: all

snapshot:
  name_template: "{{ .Tag }}-next"

release:
  # Repo in which the release will be created.
  # Default is extracted from the origin remote URL or empty if its private hosted.
  # Note: it can only be one: either github, gitlab or gitea
  github:
    owner: smallstep
    name: cli

  # IDs of the archives to use.
  # Defaults to all.
  #ids:
  #  - default
  #  - bar

  # If set to true, will not auto-publish the release.
  # Default is false.
  draft: false

  # If set to auto, will mark the release as not ready for production
  # in case there is an indicator for this in the tag e.g. v1.0.0-rc1
  # If set to true, will mark the release as not ready for production.
  # Default is false.
  prerelease: auto

  # You can change the name of the release.
  # Default is `{{.Tag}}`
  name_template: "Step CLI {{ .Tag }} ({{ .Env.RELEASE_DATE }})"

  # Header template for the release body.
  # Defaults to empty.
  header: |
    ## Official Release Artifacts

    #### Linux

    - ðŸ“¦ [step_linux_{{ .Version }}_amd64.tar.gz](https://dl.smallstep.com/gh-release/cli/gh-release-header/{{ .Tag }}/step_linux_{{ .Version }}_amd64.tar.gz)
    - ðŸ“¦ [step-cli_{{ .Version }}_amd64.deb](https://dl.smallstep.com/gh-release/cli/gh-release-header/{{ .Tag }}/step-cli_{{ .Version }}_amd64.deb)
    - ðŸ“¦ [step-cli_{{ .Version }}_amd64.rpm](https://dl.smallstep.com/gh-release/cli/gh-release-header/{{ .Tag }}/step-cli_{{ .Version }}_amd64.rpm)

    #### macOS Darwin

    - ðŸ“¦ [step_darwin_{{ .Version }}_amd64.tar.gz](https://dl.smallstep.com/gh-release/cli/gh-release-header/{{ .Tag }}/step_darwin_{{ .Version }}_amd64.tar.gz)
    - ðŸ“¦ [step_darwin_{{ .Version }}_arm64.tar.gz](https://dl.smallstep.com/gh-release/cli/gh-release-header/{{ .Tag }}/step_darwin_{{ .Version }}_arm64.tar.gz)

    #### Windows

    - ðŸ“¦ [step_windows_{{ .Version }}_amd64.zip](https://dl.smallstep.com/gh-release/cli/gh-release-header/{{ .Tag }}/step_windows_{{ .Version }}_amd64.zip)

    For more builds across platforms and architectures see the `Assets` section below.
    And for packaged versions (Homebrew, Scoop, etc.), see our [installation docs](https://smallstep.com/docs/step-cli/installation).


    Don't see the artifact you need? Open an issue [here](https://github.com/smallstep/cli/issues/new/choose).

    ## Signatures and Checksums

    `step` uses [sigstore/cosign](https://github.com/sigstore/cosign) for signing and verifying release artifacts.

    Below is an example using `cosign` to verify a release artifact:

    ```
    cosign verify-blob \
      --certificate ~/Download/step_darwin_{{ .Version }}_amd64.tar.gz.pem \
      --signature ~/Downloads/step_darwin_{{ .Version }}_amd64.tar.gz.sig \
      --certificate-identity-regexp "https://github\.com/smallstep/cli/.*" \
      --certificate-oidc-issuer https://token.actions.githubusercontent.com \
      ~/Downloads/step_darwin_{{ .Version }}_amd64.tar.gz
    ```

    The `checksums.txt` file (in the 'Assets' section below) contains a checksum for every artifact in the release.

  # Footer template for the release body.
  # Defaults to empty.
  footer: |
    ## Thanks!

    Those were the changes on {{ .Tag }}!

    Come join us on [Discord](https://discord.gg/X2RKGwEbV9) to ask questions, chat about PKI, or get a sneak peak at the freshest PKI memes.

  # You can disable this pipe in order to not upload any artifacts.
  # Defaults to false.
  #disable: true

  # You can add extra preexisting files to the release.
  # The filename on the release will be the last part of the path (base). If
  # another file with the same name exists, the latest one found will be used.
  # Defaults to empty.
  extra_files:
    - glob: ./.releases/*
  #  - glob: ./glob/**/to/**/file/**/*
  #  - glob: ./glob/foo/to/bar/file/foobar/override_from_previous

scoops:
-
  name: cli
  # Template for the url which is determined by the given Token (github or gitlab)
  # Default for github is "https://github.com/<repo_owner>/<repo_name>/releases/download/{{ .Tag }}/{{ .ArtifactName }}"
  # Default for gitlab is "https://gitlab.com/<repo_owner>/<repo_name>/uploads/{{ .ArtifactUploadHash }}/{{ .ArtifactName }}"
  # Default for gitea is "https://gitea.com/<repo_owner>/<repo_name>/releases/download/{{ .Tag }}/{{ .ArtifactName }}"
  url_template: "http://github.com/smallstep/cli/releases/download/{{ .Tag }}/{{ .ArtifactName }}"

  # Repository to push the app manifest to.
  bucket:
    owner: smallstep
    name: scoop-bucket

  # Git author used to commit to the repository.
  # Defaults are shown.
  commit_author:
    name: goreleaserbot
    email: goreleaser@smallstep.com

  # The project name and current git tag are used in the format string.
  commit_msg_template: "Scoop update for {{ .ProjectName }} version {{ .Tag }}"

  # Your app's homepage.
  # Default is empty.
  homepage: "https://smallstep.com/"

  # Skip uploads for prerelease.
  skip_upload: auto

  # Your app's description.
  # Default is empty.
  description: "Crypto toolkit for working with X.509, OAuth, JWT, OATH OTP, etc."

  # Your app's license
  # Default is empty.
  license: "Apache-2.0"

  #dockers:
  #  - dockerfile: docker/Dockerfile
  #    goos: linux
  #    goarch: amd64
  #    use_buildx: true
  #    image_templates:
  #    - "smallstep/step-cli:latest"
  #    - "smallstep/step-cli:{{ .Tag }}"
  #    build_flag_templates:
  #    - "--platform=linux/amd64"
  #  - dockerfile: docker/Dockerfile
  #    goos: linux
  #    goarch: 386
  #    use_buildx: true
  #    image_templates:
  #    - "smallstep/step-cli:latest"
  #    - "smallstep/step-cli:{{ .Tag }}"
  #    build_flag_templates:
  #    - "--platform=linux/386"
  #  - dockerfile: docker/Dockerfile
  #    goos: linux
  #    goarch: arm
  #    goarm: 7
  #    use_buildx: true
  #    image_templates:
  #    - "smallstep/step-cli:latest"
  #    - "smallstep/step-cli:{{ .Tag }}"
  #    build_flag_templates:
  #    - "--platform=linux/arm/v7"
  #  - dockerfile: docker/Dockerfile
  #    goos: linux
  #    goarch: arm64
  #    use_buildx: true
  #    image_templates:
  #    - "smallstep/step-cli:latest"
  #    - "smallstep/step-cli:{{ .Tag }}"
  #    build_flag_templates:
  #    - "--platform=linux/arm64/v8"
